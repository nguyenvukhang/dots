#!/bin/sh
# vim:syntax=bash
#
# This model of dotfiles requires the files to be organized in at
# least one directory.
#
# Linking a single "./zshenv" file to "/etc/zshenv" is not supported,
# while linking a "./foo/" directory to "/etc" is supported. ("zshenv"
# located inside of "./foo")
#
# The end result is the same (a "zshenv" is linked to "/etc/zshenv"),
# only with this model, stow can help to do path-shortening.

n_='\033[0m'  # Normal
r_='\033[31m' # Red
g_='\033[32m' # Green
s_='\033[30m' # Gray (Soft)

checkhealth() {
  # bootstrap homebrew on a mac
  if [ $OS = 'Darwin' ] && ! command -v brew >/dev/null; then
    # arm64 and non-arm archs on mac have different homebrew paths
    [ $ARCH = 'arm64' ] && PREFIX='/opt/homebrew' || PREFIX='/usr/local'
    [ ! -f $PREFIX/bin/brew ] && echo 'brew not found ._.' && exit 1
    eval "$($PREFIX/bin/brew shellenv)"
  fi

  # check that stow is installed
  if ! command -v stow >/dev/null; then
    echo 'stow not found ._.' && exit 1
  fi
}

# Counter-intuitively, this uses $1 as target and $2 for source. This
# is a purely personal choice, since I find it more important to know
# where the files are linked to in the system, since that's the point
# of variance.
#
# I have many systems, but only one set of dotfiles.
#
# ```
# parse ~/.config/nvim/colors .config/nvim/colors
# > TARGET='/home/calista/.config/nvim/colors'
# > DIR='.config/nvim'
# > PACK='colors'
# ```
#
# parse <target> <source>
parse() {
  TARGET=${1/#\~/$HOME} DIR=${2%/*} PACK=${2##*/}
  [ $DIR = $PACK ] && DIR=.
}

# a stow-powered version of "ln -s", but with source and target
# switched.
#
# link <target> <source>
link() {
  parse $@
  mkdir -p ${TARGET%/*}
  printf "${TARGET}$s_ <- ${DIR}/$g_${PACK}$n_\n"
  if [ ! -d $TARGET ]; then
    ln -s $PWD/$DIR/$PACK $TARGET
  else
    stow --target $TARGET --dir $DIR $PACK
  fi
}

# link⁻¹
#
# Uses stow to undo changes created by link. Smarter than just rm -rf.
#
# unlink <target> <source>
unlink() {
  parse $@
  printf "${1}$r_ <- $n_${DIR}/${PACK}\n"
  if [ -d $TARGET ] && [ -h $TARGET ]; then
    rm -f $TARGET
  elif [ -d $TARGET ]; then
    stow -D --target $TARGET --dir $DIR $PACK
  fi
}

# [ *.profile files ]
# Each line contains <target>:<source>
# <source> is relative to the current directory.
# For example:
# ```
# /etc/zshenv:zshenv
# ~/.config/nvim:.config/nvim
# ```

load_profile() {
  while IFS= read -r line || [ -n "$line" ]; do
    TARGET=${line%%:*} SOURCE=${line##*:}
    link $TARGET $SOURCE
  done <$1
}

unload_profile() {
  while IFS= read -r line || [ -n "$line" ]; do
    TARGET=${line%%:*} SOURCE=${line##*:}
    unlink $TARGET $SOURCE
  done <$1
}

help() {
  echo "khang's dotfiles setup

sh setup COMMAND PROFILE

COMMAND
  i, install    
  u, uninstall

PROFILE
  A plain text file where each line is of the form
  <destination>:<source>

  example line:
  ~/.config/nvim:nvim
"

  echo "Error: $1"
  exit 1
}

validate_args() {
  case $1 in
  i | install | u | uninstall) ;;
  *) help "Invalid command" ;;
  esac
  [ -z $2 ] && echo "Please specify a profile file to load" && exit 1
  [ -f $2 ] || echo "Profile not found" && exit 1
  return 0
}

validate_args() case $1 in
i | install) load_profile $2 ;;
u | uninstall) unload_profile $2 ;;
*) help "Invalid command" ;;
esac
