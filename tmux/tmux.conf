# fixes colors for:
# Terminals: kitty, iTerm2, alacritty
# Editors: neovim, vim
# Shells: zsh
# reference: https://github.com/nguyenvukhang/dots
set -g default-terminal "screen-256color"
set -ga terminal-overrides ',*-256color*:Tc'


# ............................................................ general

#                                                    general.variables

cp=copy-mode
vi=copy-mode-vi

#                                                         general.sets

set -g mouse on
set -sg escape-time 0
set -g base-index 1
set -g renumber-windows on

# ............................................................. remaps

# all default binds out the window
# "bind" is for prefixed commands
# "bind -n" is for prefix-less commands
unbind -a
unbind -a -n
unbind -a -T copy-mode
unbind -a -T copy-mode-vi

# set prefix key to ctrl-space
set -g prefix C-Space
bind C-Space send-prefix

# dark necessities
bind :      command-prompt
bind ?      list-keys
bind d      detach-client
bind x      confirm-before -p "kill-pane #P? (y/n)" kill-pane
bind X      confirm-before -p "kill-window #P? (y/n)" kill-window

# reload config
bind r      source ~/.config/tmux/tmux.conf \; display "reloaded!"

#                                                       remaps.windows

# window shifting
bind h      swap-window -t -1 \; select-window -t -1
bind l      swap-window -t +1 \; select-window -t +1

# window creation
bind -n M-n new-window -c "#{pane_current_path}"
bind c      new-window -c "#{pane_current_path}"

# window renmaing
bind ,      command-prompt "rename-window '%%'"
bind -n M-, command-prompt "rename-window '%%'"

# window splitting
bind -n M-d split-window -c "#{pane_current_path}" -h
bind -n M-D split-window -c "#{pane_current_path}" -v
bind %      split-window -c "#{pane_current_path}" -h
bind '"'    split-window -c "#{pane_current_path}" -v

# window switching
bind -n M-H prev
bind -n M-L next

#                                                         remaps.panes

# pane shifting
bind !      break-pane

# pane switching
bind -n M-h if -F '#{pane_at_left}'   '' 'select-pane -L'
bind -n M-j if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind -n M-k if -F '#{pane_at_top}'    '' 'select-pane -U'
bind -n M-l if -F '#{pane_at_right}'  '' 'select-pane -R'

# pane rotation
bind -n M-O rotatew
bind -n M-o rotatew -D

#                                                     remaps.copy_mode

bind -T $vi q send -X cancel
bind -T $cp q send -X cancel
bind -T $vi h send -X cursor-left
bind -T $vi j send -X cursor-down
bind -T $vi k send -X cursor-up
bind -T $vi l send -X cursor-right

bind -T $vi u send -X -N 13 cursor-up
bind -T $vi d send -X -N 13 cursor-down

bind -T $vi g send -X history-top
bind -T $vi G send -X history-bottom

bind -T $vi n send -X search-again
bind -T $vi N send -X search-reverse
bind -T $vi / command-prompt -p "(search down)" \
                                 "send -X search-forward \"%%%\""
bind -T $vi ? command-prompt -p "(search up)" \
                                 "send -X search-backward \"%%%\""

#                                                        remaps.others

# list running sessions on a small window
bind s         run -C 'menu -T " [ #[fg=blue]Sessions#[default] ] " \
               #{S:#S\ (#{session_windows}) "" "switchc -t #S" }'

#                                                         remaps.mouse

# send mouse actions to copy mode when starting to drag
bind -n     MouseDrag1Pane "$cp -M"
bind -T $cp MouseDrag1Pane select-pane \; send -X begin-selection
bind -T $vi MouseDrag1Pane select-pane \; send -X begin-selection
bind -n     MouseDrag1Border resize-pane -M

# once drag ends, copy the contents and cancel highlight
bind -n     MouseDragEnd1Pane send -X copy-pipe-and-cancel "pbcopy"
# right-click to paste
bind -n     MouseDown3Pane paste-buffer

bind -n     WheelUpPane if -F \
                         "#{||:#{pane_in_mode},#{mouse_any_flag}}" \
                         "send -M" "$cp -e"
bind -T $cp WheelUpPane   select-pane \; send -X -N 5 scroll-up
bind -T $cp WheelDownPane select-pane \; send -X -N 5 scroll-down
bind -T $vi WheelUpPane   select-pane \; send -X -N 5 scroll-up
bind -T $vi WheelDownPane select-pane \; send -X -N 5 scroll-down

# ......................................................... appearance

#                                                    appearance.config

main=green
message_fg=yellow
pane_border=#9BA664

birthdays="~/.local/bin/birthdays"

#                                                 appearance.selection

set -g mode-style "fg=#282828,bg=yellow"

#                                               appearance.pane_border

set -g pane-border-style fg=$pane_border
set -g pane-active-border-style fg=$pane_border

#                                                    appearance.status

set -g status on
set -g status-position bottom
set -g status-style fg=$main
set -g status-interval 15 # in seconds (default: 15)
set -g status-justify left
set -g status-keys vi

#                                               appearance.status_left

set -g status-left "[#S]"
set -g status-left-length 10
set -g status-left-style fg=$main

#                                              appearance.status_right

set -g status-right-length 40
set -g status-right ''
if "[ -f $birthdays ]" "set -g status-right '#($birthdays)  '"
# magenta date, yellow time
set -ga status-right "#[fg=magenta]%d %b  #[fg=yellow]%H:%M "

#                                              appearance.window_color

set -g window-status-current-style fg=$main
set -g window-status-style fg=color8

#                                               appearance.window_text

std_window_format=" #I:#W "
set -g window-status-current-format $std_window_format
set -g window-status-format $std_window_format
set -g window-status-separator ""

# messages
set -g message-command-style fg=white
set -g message-style fg=$message_fg
