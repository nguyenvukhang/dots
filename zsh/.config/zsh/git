#!/usr/bin/env zsh

# TODO: make it permanent that worktrees add origin tracking#
# EXAMPLE git config file:
# https://stackoverflow.com/questions/54367011/git-bare-repositories-worktrees-and-tracking-branches
#
# change default branch in a bare repo:
# https://stackoverflow.com/questions/3301956/git-correct-way-to-change-active-branch-in-a-bare-repository
# ---------------------------------------------
# [core]
# 	repositoryformatversion = 0
# 	filemode = true
# 	bare = true
# 	ignorecase = true
# 	precomposeunicode = true
# 	logallrefupdates = true
# [remote "origin"]
# 	url = git@github.com:sunnustech/app.git
#   fetch = +refs/heads/*:refs/remotes/origin/* 
# [branch "feature/scoreboard"]
# 	remote = origin
# 	merge = refs/heads/feature/scoreboard
#  THIS IS THE IMPORTANT LINE
#   fetch = +refs/heads/*:refs/remotes/origin/* 
#   fetch = +refs/heads/*:refs/remotes/origin/* 
#   fetch = +refs/heads/*:refs/remotes/origin/* 
#   fetch = +refs/heads/*:refs/remotes/origin/* 
#   fetch = +refs/heads/*:refs/remotes/origin/* 
#   fetch = +refs/heads/*:refs/remotes/origin/* 
# ---------------------------------------------

gn() { $EDITOR $(git rev-parse --git-dir)/gitnu.json }
alias gs="git number" # git status
alias ga="git number add"
alias gaa="git add --all"
alias gcf="git config --edit"
alias gd="git number diff"
alias gds="git number diff --staged"
alias giti="$EDITOR .gitignore"
alias gr="git number reset"
alias grh="git number reset --hard"
alias gitm="$EDITOR .gitmodules"
alias gcan="git commit --amend --no-edit"
alias gf="git fetch"
alias gap="git number add -p"
alias gms="git merge --squash" # squash diff into one commit
alias gm="git merge" # squash diff into one commit
alias gmn="git merge --no-ff" # squash diff into one commit
alias gu="git fetch && git status" # git update
alias gc="git commit"
alias gce="git commit --allow-empty -m"
alias gcn="git clean -fxd --exclude=\"node_modules\""
alias gcnn="git clean -fxd"
alias gp="git number -c nvim"
alias grpo="git remote prune origin"

function mongl() {
  # monitor git log
  while; do; clear; gla ${1-25}; sleep 2; done
}

function gco() {
  local OUTPUT TARGET MATCH CWD TARGET_ROOT TARGET_DIR RE

  # this will already execute the original command
  OUTPUT=$(git number checkout $@ 2>&1)

  # this function seeks to handle error messages
  TARGET="$1"

  MATCH="fatal: '$TARGET' is already checked out at '"

  RE='^fatal: .* is already checked out at (.*)$'

  [[ $OUTPUT =~ $RE ]] \
    && cd ${match[1]:1:-1} && return

  MATCH="fatal: this operation must be run in a work tree"

  # just outside a worktree
  if [[ "$OUTPUT" == "$MATCH" ]]; then
    # keys: branch name
    # values: branch root dir
    typeset -A local WORKTREES=()
    local dir
    while IFS= read -r line; do
      if [[ "$line" == "worktree"* ]]; then
        dir="${line#*worktree }"
      elif [[ "$line" == "branch"* ]]; then
        local branch="${line##*/}"
        WORKTREES[$branch]="$dir"
      fi
    done < <(git worktree list --porcelain)
    cd $WORKTREES[$TARGET]
    return 0
  fi

  # when all fails, just echo original output
  echo $OUTPUT
}

# git clone
function gcl() {
  [ ${1%%:*} = "https" ] \
    && git clone $1 && return
  [ ${1%%:*} = "git@github.com" ] \
    && git clone $1 && return
}

# git clone --bare
function gcb() {
  [ ${1%%:*} = "https" ] \
    && git clone --bare $1 && return
  [ ${1%%:*} = "git@github.com" ] \
    && git clone --bare $1 && return
}

function glt() { git log --since="24 hours ago" --oneline --graph --all } # git log (today)

# git logs
function git_log_pretty() {
  local pretty="%C(yellow)%h%C(auto)%d %Creset%s %C(dim)(%ar)"
  git log $@ --pretty=format:$pretty
}
function git_log_message_only () {
  local pretty="%C(yellow)%h %Creset%s"
  git log $@ --pretty=format:$pretty
}

function gl()  { git_log_pretty --graph -n ${1-20} }
function gla() { git_log_pretty --graph -n ${1-20} --all }
function gll() { git_log_pretty --graph --all }
function glf() { git_log_pretty --graph --follow }

# git search log
function gsl() {
  local get_commit_ids=$( git_log_message_only --color=always --all \
    | fzf $FZF_OPTS --ansi --multi 6 --bind 'enter:select-all+accept' )
  local commit_ids=()
  while IFS= read -r line; do
    git_log_message_only -1 "${line%% *}" 
  done < <( echo $get_commit_ids )
}

# git search log (with filenames)
function gslf() {
  TMP_GIT_LOG_FILE=/tmp/search-git-log.txt
  cleanup() {
    rm $TMP_GIT_LOG_FILE
  }
  trap cleanup EXIT
  git_log_message_only --compact-summary --all > $TMP_GIT_LOG_FILE
  $EDITOR $TMP_GIT_LOG_FILE
}

# git commit
function gcm() {
  [ $1 ] && git commit -m $1 && return true
  git commit
}

# git commit --amend
function gca() {
  [ $1 ] && git commit --amend -m $1 && return true
  git commit --amend
}

# the laziest git function ever
function gq() {
  _N='\033[0m'    # Normal
  _G='\033[0;32m' # Green
  _Y='\033[0;33m' # Yellow
  _B='\033[0;34m' # Blue
  _S='\033[0;37m' # Soft
  # read user input (requires enter)
  printf "${_S}Staging files:${_N}\n"
  git status -s .
  printf "${_S}Commit message > ${_N}"
  read -r "COMMIT_MSG?"
  # return on empty commit message
  [ -z "$COMMIT_MSG" ] \
    && echo "Empty commit message. Aborting." \
    && return
  # make the commit
  echo "SHOULD NOT BE HERE"
  git add .
  git commit --message="$COMMIT_MSG"
}

function gb() {
  if [ $1 ]; then; git branch "$@"; return; fi
  # fzf-branch (switch branch)
  branch=$(git branch | fzf $FZF_OPTS)
  [ $branch ] && gco ${branch[3,-1]} || return 0
}

function gur() {
  git commit -m "update ref"
  git push
}

function yeet() {
  if [ $TMUX ]; then
    tmux neww -c "#{pane_current_path}" \
    -n "pushing..." -d "git push && notify 'git push' 'is done'"
  else
    echo "You're not in tmux, boo."
  fi
}

# delete branch
# git branch -d <branch_name>

# delete remote branch
# git push origin -d <branch_name>

# to remove a submodule completely:
# 0. mv a/submodule a/submodule_tmp
# 1. git submodule deinit -f -- a/submodule    
# 2. rm -rf .git/modules/a/submodule
# 3. git rm -f a/submodule
# Note: a/submodule (no trailing slash)
# 
# or, if you want to leave it in your working tree and have done step 0
# 3.   git rm --cached a/submodule
# 3b.  mv a/submodule_tmp a/submodule
# remove a file with sensitive data from history
# git filter-repo --invert-paths --path secrets.json

# to change an old commit message:
# git rebase -i HEAD~5
# this displays the latest 5 commits in vim
# change "pick" to "reword" or "r" (read instructions opened in vim)
# write and quit
# those commits whose lines changed to "r" will be editable

# remove a secrets file from all git history:
# [https://stackoverflow.com/questions/43762338/how-to-remove-file-from-git-history]
# git filter-branch --index-filter "git rm -rf --cached --ignore-unmatch path_to_file" HEAD

# ============
# git worktree
# ============
#
# git worktree add [-f] [--detach] [--checkout] [--lock] [-b <new-branch>] <path> [<commit-ish>]
#
# to add a new branch:
# git worktree add -b <branch> ../<directory>

function gwnb() {
  git worktree add -b $1 ../$1
}
